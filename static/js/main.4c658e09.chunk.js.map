{"version":3,"sources":["WeatherComponent/SearchCity.js","WeatherComponent/ViewWeather.js","WeatherComponent/titleApp.js","WeatherComponent/FooterApp.js","App.js","serviceWorker.js","index.js"],"names":["SearchCity","props","className","onSubmit","send","type","placeholder","value","onChange","changeInput","ViewWeather","weather","humidity","name","width","length","temp","pressure","wind","tempMin","tempMax","error","icon","description","content","iconWether","imageText","src","alt","title","TitleApp","FooterApp","href","IdWeather","App","state","isLoading","InputChange","event","setState","target","getCityWeather","e","preventDefault","CityApiUrl","axios","get","then","data","weatherState","main","coord","lon","lat","speed","temp_min","temp_max","console","log","catch","loadingPage","this","role","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4c658e09.chunk.js","sourcesContent":["import React from 'react';\n\nconst SearchCity = (props) => {\n    return (\n        <div className=\"container\">\n            <form className=\"input-group mb-3 container-padding\" onSubmit={props.send}>\n                <input \n                className=\"form-control input-group-append form-control-lg text-center\" \n                type=\"text\" \n                placeholder=\"Podaj miasto\" \n                value={props.value} \n                onChange={props.changeInput}\n                />\n                <button className=\"btn btn-info btn-lg btn-outline-secondary\">Znajdź</button>\n            </form>\n        </div>\n    );\n}\n\nexport default SearchCity;","import React from 'react';\nimport './Style.css';\n\nconst ViewWeather = props => {\n  const {\n    humidity,\n    name,\n    width,\n    length,\n    temp,\n    pressure,\n    wind,\n    tempMin,\n    tempMax,\n    error,\n    icon,\n    description,\n  } = props.weather;\n\n  let content = null;\n  let iconWether = `https://openweathermap.org/img/wn/${icon}@2x.png`;\n  let imageText = `${description}`;\n  if (!error && name) {\n    content = (\n      <div className=\"container container-padding \">\n        <div className=\"card card-body text-center bg-gradient-success \">\n          <h1 className=\"text-capitalize display-3\">\n            <strong className=\"neon\">{name}</strong>\n          </h1>\n          <div className=\"row\">\n            <div className=\"col-sm-12 col-md-6 col-lg-4 container-padding\">\n              <img className=\"resize\" src={iconWether} alt={imageText} />\n            </div>\n            <div className=\"col-sm-12 col-md-6 col-lg-4 container-padding\">\n              <h2>\n                <abbr title=\"Temeratura\">\n                  <i className=\"fas fa-thermometer-half\"></i>\n                </abbr>\n                {temp} &#176;C\n              </h2>\n              <h4>\n                <abbr title=\"Tempertaura minimalna\">\n                  <i className=\"fas fa-temperature-low\"></i>\n                </abbr>\n                <span className=\"text-primary\">{tempMin}&#176;C </span>\n\n                <abbr title=\"Temperatura maksymalna\">\n                  <i className=\"fas fa-temperature-high\"></i>\n                </abbr>\n                <span className=\"text-danger\">{tempMax}&#176;C</span>\n              </h4>\n            </div>\n            <div className=\"col-sm-12 col-md-6 col-lg-4 container-padding\">\n              <div className=\"flex-column\">\n                <div><abbr title=\"Ciśnienie\">\n                  <i className=\"fas fa-chart-line\"></i>\n                </abbr>{' '}\n                {pressure} hPa{' '}</div>\n                <div><abbr title=\"Wilgotność\">\n                  <i className=\"fas fa-water\"></i>\n                </abbr>{' '}\n                {humidity}%{' '}</div>\n                <div><abbr title=\"Siła wiatru\">\n                  <i className=\"fas fa-wind\"></i>\n                </abbr>{' '}\n                {wind} m/s</div>\n              </div>\n            </div>\n            <div className=\"col-sm-12 col-md-6 col-lg-12 container-padding\">\n              <p>\n                <abbr title=\"Współrzędne geograficzne\">\n                  <i className=\"fas fa-map-marker-alt\"></i>\n                </abbr>\n                {width}&#176; {length}&#176;\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"text-center\">\n        <h1>{error ? `brak danych` : content}</h1>\n      </div>\n    </div>\n  );\n};\n\nexport default ViewWeather;\n","import React from 'react';\nimport \"./Style.css\"\n\n\n\nconst TitleApp = () => {\n    return (\n       <div>\n           <nav className=\"navbar navbar-light bg-light\">\n               <div className=\"container text-center block\">\n               <h1 className=\"display-4\"><strong>Widżet React Weather</strong></h1>\n               </div>\n             \n            </nav>\n       </div> \n    )\n}\n\nexport default TitleApp;\n","import React from 'react';\nimport \"./Style.css\";\n\nconst FooterApp = () => {\n    return (\n        <footer className=\"bg-light \">\n            \n\n            <div className=\"container \">\n            <div className=\"navbar ext-center row\">\n            <h4 className=\"col\"> &copy; DESIGN BY ADAWYS</h4>\n            <ol className=\"col fa-ul\">\n                    <a href=\"https://pl-pl.facebook.com/\"><i className=\"fab fa-facebook-square fa-2x\"></i></a>\n                    <a href=\"https://www.instagram.com/?hl=pl\"><i className=\"fab fa-instagram fa-2x\"></i></a>\n                    <a href=\"https://twitter.com/?lang=pl\"><i className=\"fab fa-twitter-square fa-2x\"></i></a>\n                    <a href=\"https://pl.linkedin.com/\"><i className=\"fab fa-linkedin fa-2x\"></i></a>\n            </ol>\n            </div>\n            </div>\n            \n            \n        </footer>\n    );\n}\n\nexport default FooterApp;\n\n","import React, {Component} from 'react';\nimport axios from \"axios\"\nimport \"./WeatherComponent/Style.css\";\nimport SearchCity from './WeatherComponent/SearchCity';\nimport ViewWeather from './WeatherComponent/ViewWeather';\nimport TitleApp from './WeatherComponent/titleApp'\nimport FooterApp from './WeatherComponent/FooterApp'\n\nconst IdWeather = \"2edd9be58dc3229eb46cb071f4e62632\";\n\n\nclass App extends Component {\n  state = {\n    value: '',\n    humidity: '',\n    name: '',\n    length: '',\n    width: '',\n    temp: '',\n    tempMin: '',\n    tempMax: '',\n    pressure: '',\n    wind: '',\n    error: false,\n    isLoading: false,\n    icon: '',\n    description: '',\n  };\n\n  InputChange = (event) => {\n    this.setState({\n      value: event.target.value,\n    });\n  };\n\n  \n  \n  getCityWeather = e => {\n    e.preventDefault();\n    this.setState({\n      isLoading: true,\n    })\n    const CityApiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=${IdWeather}&units=metric`;\n    axios.get(CityApiUrl)\n        .then(({data}) => {\n          this.setState(weatherState => ({\n                humidity: data.main.humidity,\n                name: weatherState.value,\n                length: data.coord.lon,\n                width: data.coord.lat,\n                temp: data.main.temp,\n                pressure: data.main.pressure,\n                wind: data.wind.speed,\n                tempMin: data.main.temp_min,\n                tempMax: data.main.temp_max,\n                icon: data.weather[0].icon,\n                description: data.weather[0].description,\n                error: false,\n                isLoading: false,\n              }));\n              console.log(data.weather[0].icon)\n        })\n        .catch(error => {\n            this.setState({\n              error: true,\n              isLoading: false,\n            })\n          });\n  };\n  render() {\n\n    let loadingPage;\n\n    if (this.state.isLoading) {\n        loadingPage = (\n          <div className=\"container\">\n            <div className=\"d-flex justify-content-center\">\n            <div className=\"spinner-border m-5 \" role=\"status\">\n              <span className=\"sr-only\">Loading...</span>\n              </div>\n          </div>\n          </div>\n          \n        )\n    } else {\n        loadingPage = (\n        <ViewWeather weather={this.state} />\n        );\n    }\n\n\n    return (\n      <>\n        <div>\n        \n        <TitleApp/> \n        \n        <div className=\"background\"> \n        <SearchCity\n          value={this.state.value}\n          changeInput={this.InputChange}\n          send={this.getCityWeather}\n        />\n        {loadingPage}\n        </div>\n        <FooterApp /> \n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}